document.addEventListener('DOMContentLoaded', function() {
    const productsContainer = document.getElementById('products-container');
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const loadingDiv = document.getElementById('loading');    
    let currentSearchQuery = '';
    let isLoading = false;
    
    function showLoading() {
        if (loadingDiv) loadingDiv.style.display = 'block';
        if (productsContainer) productsContainer.innerHTML = '';
        isLoading = true;
    }        
    function hideLoading() {
        if (loadingDiv) loadingDiv.style.display = 'none';
        isLoading = false;
    }        
    // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
    function calculateDiscountPrice(price, discountPercentage) {
        if (!price || isNaN(price)) return '0.00';
        return discountPercentage ? (price - (price * discountPercentage / 100)).toFixed(2) : price.toFixed(2);
    }           
    function createProductCard(product) {
        if (!product || !product.id) {
            console.warn('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä:', product);
            return '';
        }        
        const discountPrice = calculateDiscountPrice(product.price, product.discountPercentage);
        const hasDiscount = product.discountPercentage > 0;
        const imageUrl = product.thumbnail || (product.images && product.images[0]) || '/placeholder.png';
        const title = product.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';        
        return `
        <div class="product-card" data-product-id="${product.id}">
            <img src="${imageUrl}" 
                 alt="${title}" 
                 class="product-image"
                 onerror="this.src='/placeholder.png'">
            <div class="product-info">
                <h3 class="product-title">${title}</h3>
                <div class="product-prices-button">
                    <div class="product-prices">
                        ${hasDiscount ? `<span class="original-price">$${product.price.toFixed(2)}</span>` : ''}
                        <span class="discount-price">$${discountPrice}</span>
                    </div>
                    <button class="product-button" onclick="goToProduct(${product.id})">üõà</button>
                </div>
            </div>
        </div>
        `;
    }           
    function displayProducts(products, searchQuery = '') {
        if (!productsContainer) return;
        
        if (!products || products.length === 0) {
            const message = searchQuery ? 
                `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã` : 
                '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
            productsContainer.innerHTML = `
                <div class="no-products" style="text-align: center; padding: 50px;">
                    <p style="font-size: 1.2rem; color: #666; margin-bottom: 20px;">${message}</p>
                    ${searchQuery ? '<button onclick="clearSearch()" class="clear-search-btn">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã</button>' : ''}
                </div>
            `;
            return;
        }        
        const validProducts = products.filter(product => product && product.id);
        if (validProducts.length !== products.length) {
            console.warn(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${products.length - validProducts.length} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
        }        
        const cardsHTML = validProducts.map(product => createProductCard(product)).join('');
        productsContainer.innerHTML = cardsHTML;
        
        if (searchQuery) {
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${validProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`);
        }
    }          
    function loadProducts(searchQuery = '') {
        if (isLoading) {
            console.log('–ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...');
            return;
        }        
        const trimmedQuery = searchQuery.trim();
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º:', trimmedQuery);        
        showLoading();
        currentSearchQuery = trimmedQuery;        
        let apiUrl = '/api/products';
        if (trimmedQuery !== '') {
            if (trimmedQuery.length > 100) {
                hideLoading();
                displayError('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)');
                return;
            }            
            apiUrl = `/api/products?q=${encodeURIComponent(trimmedQuery)}`;
            console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤');
        } else {
            console.log('–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
        }                
        console.log('API URL:', apiUrl);        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥        
        fetch(apiUrl, { signal: controller.signal })
            .then(response => {
                clearTimeout(timeoutId);
                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);                
                hideLoading();               
                if (currentSearchQuery !== trimmedQuery) {
                    console.log('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
                    return;
                }                
                if (data && data.products && Array.isArray(data.products)) {
                    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${data.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
                    displayProducts(data.products, trimmedQuery);
                } else if (Array.isArray(data)) {
                    console.log(`–ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ${data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                    displayProducts(data, trimmedQuery);
                } else {
                    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', data);
                    displayError('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
                }
            })
            .catch(error => {
                clearTimeout(timeoutId);
                hideLoading();                
                if (error.name === 'AbortError') {
                    console.error('–ó–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
                    displayError('–ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                } else {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    displayError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${error.message}`);
                }
            });
    }    
    function displayError(message) {
        if (productsContainer) {
            productsContainer.innerHTML = `
                <div class="error" style="text-align: center; padding: 50px;">
                    <p style="color: red; font-size: 1.1rem; margin-bottom: 20px;">${message}</p>
                    <button onclick="location.reload()" class="retry-btn">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            `;
        }
    }        
    function performSearch() {
        const query = searchInput ? searchInput.value.trim() : '';
        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º:', query); 
        loadProducts(query);
    }    
    window.clearSearch = function() {
        if (searchInput) searchInput.value = '';
        currentSearchQuery = '';
        loadProducts();
    };    
    if (searchButton) {
        searchButton.addEventListener('click', function(e) {
            e.preventDefault();
            performSearch();
        });
    }    
    if (searchInput) {
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });        
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            
            if (this.value.trim() === '') {
                console.log('–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
                loadProducts();
            } else {
                searchTimeout = setTimeout(() => {
                    if (this.value.trim() !== currentSearchQuery) {
                        performSearch();
                    }
                }, 500);
            }
        });
    }       
    window.goToProduct = function(productId) {
        if (!productId || isNaN(productId)) {
            console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:', productId);
            return;
        }
        window.location.href = `/product.html?id=${productId}`;
    };    
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
    loadProducts();
});
